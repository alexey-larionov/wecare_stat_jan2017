dim(covar.df)
str(covar.df)
covar.df[1:5,1:5]
dim(samples.df)
str(samples.df)
samples.df[1:5,]
dim(demographics.df)
str(demographics.df)
demographics.df[1:5,1:5]
dim(phenotypes_update.df)
str(phenotypes_update.df)
phenotypes_update.df[1:5,1:5]
dim(BRCA1_BRCA2_PALB2_cases.df)
str(BRCA1_BRCA2_PALB2_cases.df)
BRCA1_BRCA2_PALB2_cases.df[1:5,1:5]
dim(vv.df)
str(vv.df)
vv.df[1:5,1:5]
dim(kgen.df)
str(kgen.df)
kgen.df[1:5,1:5]
dim(exac.df)
str(exac.df)
exac.df[1:5,1:5]
# Check consistence of rownames
sum(rownames(gt.mx) != rownames(gq.mx))
sum(rownames(gt.mx) != rownames(dp.mx))
sum(rownames(gt.mx) != rownames(vv.df))
sum(rownames(gt.mx) != rownames(kgen.df))
sum(rownames(gt.mx) != rownames(exac.df))
# Check consistence of colnames
sum(colnames(gt.mx) != colnames(gq.mx))
sum(colnames(gt.mx) != colnames(dp.mx))
# Fraction of NA genotypes before filtering
sum(is.na(gt.mx))/(dim(gt.mx)[1]*dim(gt.mx)[2]) # ~4%
# Call rates per variant before filtering
x <- ncol(gt.mx)
y <- apply(gt.mx,1,function(z){1-sum(is.na(z))/x})
hist(y, breaks=50, xlab=NULL, main="Call rates per variant before genotypes filtering")
# Histogram of gq  before filtering (when gt is not NA !)
hist(gq.mx[!is.na(gt.mx)], breaks=50, main="Histogram of gq in non-NA genotypes (before filtering)", xlab=NULL)
# Histogram of dp before filtering (when gt is not NA !)
hist(dp.mx[!is.na(gt.mx)], breaks=50, main="Histogram of dp in non-NA genotypes (before filtering)", xlab=NULL)
hist(dp.mx[!is.na(gt.mx)], breaks=2500, xlim=c(0,100), main="Histogram of dp in non-NA genotypes (before filtering, 0:100)", xlab=NULL)
rm(x,y)
# num of genotypes to be removed
sum(gq.mx < min.gq, na.rm=TRUE)
# Fraction of genotypes to be removed
sum(gq.mx < min.gq, na.rm=TRUE)/sum(!is.na(gq.mx)) # ~8%
# Apply filter (to gt only !)
NA -> gt.mx[ gq.mx < min.gq ]
# Clean up
rm(min.gq)
dim(gt.mx)
# Fraction of NA genotypes after filtering
sum(is.na(gt.mx))/(dim(gt.mx)[1]*dim(gt.mx)[2]) # ~12%
# Call rates per variant after gq filtering
x <- ncol(gt.mx)
y <- apply(gt.mx, 1, function(z){1-sum(is.na(z))/x})
hist(y, xlab=NULL, main="Histogram of call rates per variant after gt filtering")
# Histogram of gq  after gq filtering (when gt is not NA !)
hist(gq.mx[!is.na(gt.mx)], xlim=c(0,100), breaks=50, main="Histogram of gq in non NA genotypes (after gq filtering)", xlab=NULL)
View(vv.df)
# Histogram of dp after gt filtering (when gt is not NA !)
hist(dp.mx[!is.na(gt.mx)], breaks=50, main="Histogram of dp in non-NA genotypes (after gt filtering)", xlab=NULL)
hist(dp.mx[!is.na(gt.mx)], xlim=c(0,100), breaks=2500, main="Histogram of dp in non-NA genotypes (after gt filtering, 0:100)", xlab=NULL)
# Clean up
rm(x, y)
# num of genotypes to be removed
sum(dp.mx > max.dp, na.rm=TRUE)
# Fraction of genotypes to be removed (appr)
sum(dp.mx > max.dp, na.rm=TRUE)/sum(!is.na(gq.mx)) # <<1%
# Apply filter (to gt only !)
NA -> gt.mx[ dp.mx > max.dp ]
# Clean up
rm(max.dp)
dim(gt.mx)
# Fraction of NA genotypes after filtering
sum(is.na(gt.mx))/(dim(gt.mx)[1]*dim(gt.mx)[2]) # ~12%
# Call rates per variant after gq filtering
x <- ncol(gt.mx)
y <- apply(gt.mx, 1, function(z){1-sum(is.na(z))/x})
hist(y, xlab=NULL, main="Call rates per variant after gt+dp filtering")
# Histogram of gq  after gq+dp filtering (when gt is not NA !)
hist(gq.mx[!is.na(gt.mx)], xlim=c(0,100), breaks=50, main="Histogram of gq in non-NA genotypes (after gq+dp filtering)", xlab=NULL)
# Histogram of dp after gt filtering (when gt is not NA !)
hist(dp.mx[!is.na(gt.mx)], breaks=50, main="Histogram of dp after gt+dp filtering", xlab=NULL)
hist(dp.mx[!is.na(gt.mx)], xlim=c(0,100), breaks=500, main="Histogram of dp in non-NA genotypes (after gt+dp filtering, 0:100)", xlab=NULL)
# Clean up
rm(x, y)
# Estimate the proportion of variants to be removed
x <- ncol(gt.mx)
y <- apply(gt.mx, 1, function(z){1-sum(is.na(z))/x})
y[1:7]
var.retained <- y >= min.call.rate
sum(var.retained) # 283.651
1 - sum(var.retained)/nrow(gt.mx) # ~18%
# Remove variants with loaw call rates
gt.mx <- gt.mx[ var.retained, ]
dp.mx <- dp.mx[ var.retained, ]
gq.mx <- gq.mx[ var.retained, ]
vv.df <- vv.df[ var.retained, ]
kgen.df <- kgen.df[ var.retained, ]
exac.df <- exac.df[ var.retained, ]
# Clean-up
rm(min.call.rate, var.retained, x, y)
dim(gt.mx)
# Fraction of NA genotypes after filtering
sum(is.na(gt.mx))/(dim(gt.mx)[1]*dim(gt.mx)[2]) # ~8%
# Call rates per variant after filtering
x <- ncol(gt.mx)
y <- apply(gt.mx,1,function(z){1-sum(is.na(z))/x})
hist(y, xlim=c(0,1), breaks=10, xlab=NULL, main="Call rates per variant after gq+dp+cr genotypes filtering")
# Histogram of gq  after filtering (when gt is not NA !)
hist(gq.mx[!is.na(gt.mx)], xlim=c(0,100), breaks=50, main="Histogram of gq in non-NA genotypes (after gq+dp+cr filtering)", xlab=NULL)
# Histogram of dp  after filtering (when gt is not NA !)
hist(dp.mx[!is.na(gt.mx)], breaks=50, main="Histogram of dp in non-NA genotypes (after gq+dp+cr filtering)", xlab=NULL)
hist(dp.mx[!is.na(gt.mx)], breaks=500, xlim=c(0,100), main="Histogram of dp in non-NA genotypes (after gq+dp+cr filtering, 0:100)", xlab=NULL)
# Clean-up
rm(x, y)
mean(gq.mx, na.rm=TRUE)
mean(dp.mx, na.rm=TRUE)
rm(gq.mx, dp.mx)
dim(gt.mx)
class(gt.mx)
gt.mx[1:5,1:5]
dim(gq.mx)
library(SKAT)
power_480 <- Power_Logistic(
N.Sample.ALL = 480,
Case.Prop=0.5,
SubRegion.Length=3000,
Causal.MAF.Cutoff=0.03,
Causal.Percent= 20,
N.Sim=100,
MaxOR=2, OR.Type = "Fixed")
power_3731 <- Power_Logistic(
N.Sample.ALL = 3731,
Case.Prop=0.41,
SubRegion.Length=3000,
Causal.MAF.Cutoff=0.03,
Causal.Percent= 20,
N.Sim=100,
MaxOR=2, OR.Type = "Fixed")
power_480
power_3731
power_480 <- Power_Logistic(
N.Sample.ALL = 480,
Case.Prop=0.5,
SubRegion.Length=3000,
Causal.MAF.Cutoff=0.03,
Causal.Percent= 50,
N.Sim=100,
MaxOR=2, OR.Type = "Fixed")
power_3731 <- Power_Logistic(
N.Sample.ALL = 3731,
Case.Prop=0.41,
SubRegion.Length=3000,
Causal.MAF.Cutoff=0.03,
Causal.Percent= 50,
N.Sim=100,
MaxOR=2, OR.Type = "Fixed")
power_480
power_3731
power_480 <- Power_Logistic(
N.Sample.ALL = 480,
Case.Prop=0.5,
SubRegion.Length=3000,
Causal.MAF.Cutoff=0.05,
Causal.Percent= 50,
N.Sim=100,
MaxOR=2, OR.Type = "Fixed")
power_3731 <- Power_Logistic(
N.Sample.ALL = 3731,
Case.Prop=0.41,
SubRegion.Length=3000,
Causal.MAF.Cutoff=0.05,
Causal.Percent= 50,
N.Sim=100,
MaxOR=2, OR.Type = "Fixed")
power_480
power_3731
Power_Logistic
library(SKAT)
?Power_Logistic
library(plotly)
library(ggplot)
.libPath()
.libPaths()
.libPaths("/scratch/medgen/tools/r/R-3.3.2/lib64/R/library")
.libPaths()
library(ggplot)
library(plotly)
# Start time
Sys.time()
# Folders
setwd("/scratch/medgen/scripts/wecare_stat_01.17/scripts")
interim_data_folder <- "/scratch/medgen/scripts/wecare_stat_01.17/interim_data"
# Load libraries
library(dplyr)
library(reshape2) # for melt()
library(ggplot2)
library(VennDiagram)
# Load data
load(paste(interim_data_folder, "r06a_exclude_egenvectors_outliers_wecare_only_jan2017.RData", sep="/"))
ls()
dim(wecare_genotypes.mx)
class(wecare_genotypes.mx)
wecare_genotypes.mx[1:5,1:5]
dim(wecare_phenotypes.df)
str(wecare_phenotypes.df)
wecare_phenotypes.df[1:5,1:5]
dim(wecare_variants.df)
colnames(wecare_variants.df)
wecare_variants.df[1:5,1:5]
dim(wecare_kgen.df)
colnames(wecare_kgen.df)
wecare_kgen.df[1:5,1:5]
dim(wecare_exac.df)
colnames(wecare_exac.df)
wecare_exac.df[1:5,1:5]
# Check consistency of rownames and colnames
sum(colnames(wecare_genotypes.mx) != rownames(wecare_phenotypes.df))
sum(rownames(wecare_genotypes.mx) != rownames(wecare_variants.df))
sum(rownames(wecare_genotypes.mx) != rownames(wecare_kgen.df))
sum(rownames(wecare_genotypes.mx) != rownames(wecare_exac.df))
# SIFT
unique(as.vector(wecare_variants.df$SIFT_call))
# PolyPhen
unique(as.vector(wecare_variants.df$PolyPhen_call))
#CLIN_SIG
unique(unlist(strsplit(as.vector(wecare_variants.df$CLIN_SIG), split="\\&")))
x <- wecare_kgen.df  %>% filter(kgen.EUR_AF > 0.9) %>% select(SplitVarID) # 2,104
y <- wecare_exac.df  %>% filter(exac_non_TCGA.AF > 0.9) %>% select(SplitVarID) # 1,508
x <- as.character(x[,1])
y <- as.character(y[,1])
z <- intersect(x,y) # 1,400
length(x)
length(y)
length(z)
rm(x,y,z)
sum(is.na(wecare_variants.df$Consequence)) # 0
a <- strsplit(as.vector(wecare_variants.df$Consequence),"&")
b <- unique(as.vector(unlist(a)))
b
rm(a,b)
sum(is.na(wecare_variants.df$Consequence)) # 0
# --- Splice acceptor variants (sav) --- #
splice_acceptor_variant <- grepl( "splice_acceptor_variant", wecare_variants.df$Consequence)
sum(splice_acceptor_variant) # 317
# mean count of alleles per case in wecare
sav_wecare.mx <- wecare_genotypes.mx[splice_acceptor_variant,]
sav_wecare.counts <- apply(sav_wecare.mx, 2, sum, na.rm=TRUE)
sav_wecare.mean <- mean(sav_wecare.counts, na.rm=TRUE) # ~20
rm(sav_wecare.mx, sav_wecare.counts)
# --- Splice donor variants (sdv) --- #
splice_donor_variant <- grepl( "splice_donor_variant", wecare_variants.df$Consequence)
sum(splice_donor_variant) # 467
# mean count of alleles per case in wecare
sdv_wecare.mx <- wecare_genotypes.mx[splice_donor_variant,]
sdv_wecare.counts <- apply(sdv_wecare.mx, 2, sum, na.rm=TRUE)
sdv_wecare.mean <- mean(sdv_wecare.counts, na.rm=TRUE) # ~17
rm(sdv_wecare.mx, sdv_wecare.counts)
# --- Stop gains --- #
stop_gain <- grepl( "stop_gain", wecare_variants.df$Consequence)
sum(stop_gain) # 1,168
# mean count of alleles per case in wecare
stogv_wecare.mx <- wecare_genotypes.mx[stop_gain,]
stogv_wecare.counts <- apply(stogv_wecare.mx, 2, sum, na.rm=TRUE)
stogv_wecare.mean <- mean(stogv_wecare.counts, na.rm=TRUE) # ~51
rm(stogv_wecare.mx, stogv_wecare.counts)
# --- Stop losts --- #
# Interestingly, there are much less of stop_losts than stop_gains: 56 and 1,168 respectively.
# This looks contraintuitive, suggesting that stop_gains are better tolerated than stop losses.
# In other words: stop_losses may be under stronger evolutionary control than stop_gains??
# An alternative explanation coulod be that stop losts can only happen on stop codons;
# while stop gain can happen in "any"" codon within the gene: so stop gains have much more chances to happen.
stop_lost <- grepl( "stop_lost", wecare_variants.df$Consequence)
sum(stop_lost) # 56
# mean count of alleles per case in wecare
stolv_wecare.mx <- wecare_genotypes.mx[stop_lost,]
stolv_wecare.counts <- apply(stolv_wecare.mx, 2, sum, na.rm=TRUE)
stolv_wecare.mean <- mean(stolv_wecare.counts, na.rm=TRUE) # ~14
rm(stolv_wecare.mx, stolv_wecare.counts)
# --- Start losts --- #
# Functional significance of start losses may be questioned: a heterozigous start loss may
# be easily compemsated by a mere expression of retained allele??
# However, there is not much of them... Either this is an evolutionary control or just "low base" effect (as above for the stop_losses)?
# The total number of start losses is small, so they should not influence the analysis too much anyway ...
# Why there is no such consequence as "Start gain" ?
start_lost <- grepl( "start_lost", wecare_variants.df$Consequence)
sum(start_lost) # 81
# mean count of alleles per case in wecare
stalv_wecare.mx <- wecare_genotypes.mx[start_lost,]
stalv_wecare.counts <- apply(stalv_wecare.mx, 2, sum, na.rm=TRUE)
stalv_wecare.mean <- mean(stalv_wecare.counts, na.rm=TRUE) # ~7
rm(stalv_wecare.mx, stalv_wecare.counts)
# --- Frameshifts --- #
frameshift_variant <- grepl( "frameshift_variant", wecare_variants.df$Consequence)
sum(frameshift_variant) # 1,278
# mean count of alleles per case in wecare
fsv_wecare.mx <- wecare_genotypes.mx[frameshift_variant,]
fsv_wecare.counts <- apply(fsv_wecare.mx, 2, sum, na.rm=TRUE)
fsv_wecare.mean <- mean(fsv_wecare.counts, na.rm=TRUE) # ~113
rm(fsv_wecare.mx, fsv_wecare.counts)
# --- all LoF-s --- #
lof <- splice_acceptor_variant | splice_donor_variant | stop_gain | stop_lost | start_lost | frameshift_variant
sum(lof) # 3,786
# mean count of alleles per case in wecare
lof_wecare.mx <- wecare_genotypes.mx[lof,]
lof_wecare.counts <- apply(lof_wecare.mx, 2, sum, na.rm=TRUE)
lof_wecare.mean <- mean(lof_wecare.counts, na.rm=TRUE) # ~218
rm(lof_wecare.mx, lof_wecare.counts)
# ------- Plot average counts of lof-s per individual ------- #
# Summary table with average numbers of lof-s per individual
lof_summary_counts.df <- as.data.frame(cbind(
lof_type=c("splice_acceptor", "splice_donior", "stop_gain", "stop_lost", "start_lost", "frameshift", "all_LoFs"),
lof_count=c(sav_wecare.mean, sdv_wecare.mean, stogv_wecare.mean, stolv_wecare.mean, stalv_wecare.mean, fsv_wecare.mean, lof_wecare.mean)))
lof_summary_counts.df$lof_count <- as.numeric(as.vector(lof_summary_counts.df$lof_count))
lof_summary_counts.df <- lof_summary_counts.df %>% arrange(desc(lof_count))
# Order of levels defines order of bars on the plot
lof_summary_counts.df$lof_type <- factor(lof_summary_counts.df$lof_type,
levels=c("all_LoFs", "frameshift", "stop_gain", "splice_acceptor", "splice_donior", "stop_lost", "start_lost"))
# Plot
ggplot(lof_summary_counts.df, aes(lof_type, lof_count)) +
geom_bar(stat="identity", fill="blue", alpha=0.5) +
geom_text(aes(label=round(lof_count,1)), vjust=-1, size=5)+
labs(x = "", y = "") +
ylim(0,250) +
theme(axis.text.x = element_text(hjust=1, size=18, angle=45)) +
ggtitle("Average counts of LoF variants per individual")
# Clean-up
rm(splice_acceptor_variant, splice_donor_variant, stop_gain, frameshift_variant, stop_lost,
start_lost, sav_wecare.mean, sdv_wecare.mean, stogv_wecare.mean, stolv_wecare.mean,
stalv_wecare.mean, fsv_wecare.mean, lof_summary_counts.df)
missense_all <- grepl( "missense_variant", wecare_variants.df$Consequence)
sum(missense_all) # 83,546
summary(wecare_variants.df$SIFT_call)
# note many NAs; these are when SIFT is irrelevant (e.g. non-coding)?
deleterious <- wecare_variants.df$SIFT_call == "deleterious"
summary(deleterious)
FALSE -> deleterious[is.na(deleterious)]
summary(deleterious) # 28,459
summary(wecare_variants.df$PolyPhen_call)
# note many NAs; these are when PolyPhen is irrelevant (e.g. non-coding)?
probably_damaging <- wecare_variants.df$PolyPhen_call == "probably_damaging"
summary(probably_damaging)
FALSE -> probably_damaging[is.na(probably_damaging)]
summary(probably_damaging) # 18,409
missense <- deleterious & probably_damaging
sum(missense) # 13,441
# mean count of missenses per case in wecare
missense_wecare.mx <- wecare_genotypes.mx[missense,]
missense_wecare.counts <- apply(missense_wecare.mx, 2, sum, na.rm=TRUE)
missense_wecare.mean <- mean(missense_wecare.counts, na.rm=TRUE)
missense_wecare.mean # ~379
# Clean-up
rm(missense_all, deleterious, probably_damaging, missense_wecare.mx, missense_wecare.counts)
selected_clinsig_terms <- c("likely_pathogenic", "risk_factor", "pathogenic", "association", "protective", "drug_response")
clinsig <- wecare_variants.df$CLIN_SIG %in% selected_clinsig_terms
sum(clinsig) # 718
# mean count of alleles per case in wecare
clinsig_wecare.mx <- wecare_genotypes.mx[clinsig,]
clinsig_wecare.counts <- apply(clinsig_wecare.mx, 2, sum, na.rm=TRUE)
clinsig_wecare.mean <- mean(clinsig_wecare.counts, na.rm=TRUE)
clinsig_wecare.mean # 90
rm(selected_clinsig_terms, clinsig_wecare.mx, clinsig_wecare.counts)
# Count combinarions of selectred categories
lof_missense <- lof & missense
clinsig_missense <- clinsig & missense
lof_clinsig <- lof & clinsig
lof_clinsig_missense <- lof_clinsig & missense
summary(lof_missense)
summary(clinsig_missense)
summary(lof_clinsig)
summary(lof_clinsig_missense)
selected_variants <- lof | clinsig | missense
summary(selected_variants) # 17,633
# --- explore_frequent_in_kgen --- #
# Count variants that will be excluded because of high frequency in kgen
kgen_90 <- wecare_kgen.df$kgen.EUR_AF > 0.9
summary(kgen_90)
FALSE -> kgen_90[is.na(kgen_90)]
summary(kgen_90) # 2,104
sum(kgen_90 & lof) # 8
sum(kgen_90 & clinsig) # 4
sum(kgen_90 & missense) # 7
sum(lof_missense & kgen_90) # 0
sum(clinsig_missense & kgen_90) # 0
sum(lof_clinsig & kgen_90) # 0
selected_kgen_90 <- selected_variants & kgen_90
sum(selected_kgen_90)
# Look at the selected kgen_90 genes
# For now they will be excluded; in future they maybe "reverted"
as.vector(wecare_variants.df[selected_kgen_90,c("SYMBOL")])
# --- Plot venn diagram of selected variants by categories --- #
grid.newpage()
draw.triple.venn(
area1=sum(lof),
area2=sum(clinsig),
area3=sum(missense),
n12=sum(lof_clinsig),
n23=sum(clinsig_missense),
n13=sum(lof_missense),
n123=sum(lof_clinsig_missense),
category=c(
paste("lof\n", sum(lof), " (", sum(kgen_90 & lof), " kgen_90)"),
paste("clinsig\n", sum(clinsig), " (", sum(kgen_90 & clinsig), " kgen_90)"),
paste("missense\n", sum(missense), " (", sum(kgen_90 & missense), " kgen_90)")),
fill = c("red", "green", "blue"),
alpha = c(0.3, 0.3, 0.3),
cex=2, cat.fontface=4, fontfamily=3)
# --- Plot mean counts of variant types per individual --- #
# Summary table with average numbers of protein-affecting per individual
summary_counts.df <- as.data.frame(cbind(
type=c("Missense", "LoF", "ClinVar"),
count=c(missense_wecare.mean, lof_wecare.mean, clinsig_wecare.mean)))
# Convert numbers to numeric vector
summary_counts.df$count <- as.numeric(as.vector(summary_counts.df$count))
# Order of levels defines order of bars on the plot
summary_counts.df$type <- factor(summary_counts.df$type,
levels=c("Missense", "LoF", "ClinVar"))
# Plot
ggplot(summary_counts.df, aes(type, count)) +
geom_bar(stat="identity", fill="blue", alpha=0.5) +
geom_text(aes(label=round(count,1)), vjust=-1, size=5)+
ylim(0, 420) +
labs(x = "", y = "") +
theme(axis.text.x = element_text(hjust=1, size=18, angle=45)) +
ggtitle("Average counts of selected variants per individual")
# Clean-up
rm(lof, clinsig, missense, lof_clinsig, clinsig_missense, lof_missense, lof_clinsig_missense, kgen_90, selected_kgen_90, summary_counts.df,
missense_wecare.mean, lof_wecare.mean, clinsig_wecare.mean)
wecare_variants.df <- wecare_variants.df[selected_variants,]
wecare_kgen.df <- wecare_kgen.df[selected_variants,]
wecare_exac.df <- wecare_exac.df[selected_variants,]
wecare_genotypes.mx <- wecare_genotypes.mx[selected_variants,]
# Clean-up
rm(selected_variants)
length(unique(wecare_variants.df$SYMBOL)) # 8,773
x <- sort(table(as.vector(wecare_variants.df$SYMBOL)), decreasing = TRUE)
x[1:200]
y <- wecare_variants.df %>%  group_by(SYMBOL) %>% summarise(n())
"vars_count" -> colnames(y)[2]
hist(y$vars_count, main="Histogram for numbers of protein-affecting variants per gene", xlab="Variants per gene", ylab="Number of genes", ylim=c(0,7000), breaks=25, labels = TRUE)
mean(y$vars_count) # 2.009917
# Clean-up
rm(x,y)
write(x, file=paste(results_folder, "variants_per_gene.txt"))
length(unique(wecare_variants.df$SYMBOL)) # 8,773
x <- sort(table(as.vector(wecare_variants.df$SYMBOL)), decreasing = TRUE)
x[1:200]
write(x, file=paste(results_folder, "variants_per_gene.txt"))
write(x, file=paste(results_folder, "variants_per_gene.txt", sep="/"))
y <- cbind(names(x),x)
View(y)
c("gene","count") <- colnames(y)
c("gene","count") -> colnames(y)
write(y, file=paste(results_folder, "variants_per_gene.txt", sep="/"))
c("gene","count") -> colnames(y)
View(y)
write.table(y, file=paste(results_folder, "variants_per_gene.txt", sep="/"))
write.table(y, file=paste(results_folder, "variants_per_gene.txt", sep="/"), quote="", row.names = FALSE)
write.table(y, file=paste(results_folder, "variants_per_gene.txt", sep="/"), quote = FALSE, row.names = FALSE)
z <- wecare_variants.df %>%  group_by(SYMBOL) %>% summarise(n())
"vars_count" -> colnames(z)[2]
hist(z$vars_count, main="Histogram for numbers of protein-affecting variants per gene", xlab="Variants per gene", ylab="Number of genes", ylim=c(0,7000), breaks=25, labels = TRUE)
mean(y$vars_count) # 2.009917
mean(z$vars_count) # 2.009917
rm(x,y,z)
# Get number of genes
length(unique(wecare_variants.df$SYMBOL)) # 8,773
# Look at the top genes
x <- sort(table(as.vector(wecare_variants.df$SYMBOL)), decreasing = TRUE)
x[1:200]
# Save table of counts
y <- cbind(names(x),x)
c("gene","count") -> colnames(y)
write.table(y, file=paste(results_folder, "variants_per_gene.txt", sep="/"), quote = FALSE, row.names = FALSE)
# Plot histogram
z <- wecare_variants.df %>%  group_by(SYMBOL) %>% summarise(n())
"vars_count" -> colnames(z)[2]
hist(z$vars_count, main="Histogram for numbers of protein-affecting variants per gene", xlab="Variants per gene", ylab="Number of genes", ylim=c(0,7000), breaks=25, labels = TRUE)
mean(z$vars_count) # 2.009917
# Clean-up
rm(x,y,z)
dim(wecare_genotypes.mx)
class(wecare_genotypes.mx)
wecare_genotypes.mx[1:5,1:5]
dim(gt_nfe.mx)
class(gt_nfe.mx)
gt_nfe.mx[1:5,1:5]
dim(wecare_kgen.df)
colnames(wecare_kgen.df)
wecare_kgen.df[1:5,1:5]
dim(wecare_exac.df)
colnames(wecare_exac.df)
wecare_exac.df[1:5,1:5]
dim(wecare_variants.df)
str(wecare_variants.df)
wecare_variants.df[1:5,1:5]
dim(wecare_phenotypes.df)
str(wecare_phenotypes.df)
wecare_phenotypes.df[1:5,1:5]
# Check consistency of rownames and colnames
sum(colnames(wecare_genotypes.mx) != rownames(wecare_phenotypes.df))
sum(rownames(wecare_genotypes.mx) != rownames(gt_nfe.mx))
sum(rownames(wecare_genotypes.mx) != rownames(wecare_kgen.df))
sum(rownames(wecare_genotypes.mx) != rownames(wecare_exac.df))
sum(rownames(wecare_genotypes.mx) != rownames(wecare_variants.df))
save.image(paste(interim_data_folder, "/", "s07a_filter_by_variant_effect_wecare_only_jan2017.RData", sep=""))
save.image(paste(interim_data_folder, "s07a_filter_by_variant_effect_wecare_only_jan2017.RData", sep="/"))
